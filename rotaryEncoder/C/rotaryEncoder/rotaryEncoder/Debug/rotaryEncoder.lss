
rotaryEncoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000036a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000edd  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000920  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000647  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000488  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000637  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  8e:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	5e 9a       	sbi	0x0b, 6	; 11
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x4>
  9a:	5e 98       	cbi	0x0b, 6	; 11
  9c:	08 95       	ret

0000009e <lcd_write>:
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	d8 2f       	mov	r29, r24
  a4:	66 23       	and	r22, r22
  a6:	11 f0       	breq	.+4      	; 0xac <lcd_write+0xe>
  a8:	5c 9a       	sbi	0x0b, 4	; 11
  aa:	01 c0       	rjmp	.+2      	; 0xae <lcd_write+0x10>
  ac:	5c 98       	cbi	0x0b, 4	; 11
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	cb b1       	in	r28, 0x0b	; 11
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	8d 2f       	mov	r24, r29
  bc:	82 95       	swap	r24
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	8c 2b       	or	r24, r28
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	dc 2b       	or	r29, r28
  cc:	db b9       	out	0x0b, r29	; 11
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d2:	cf 60       	ori	r28, 0x0F	; 15
  d4:	cb b9       	out	0x0b, r28	; 11
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_read>:
  dc:	88 23       	and	r24, r24
  de:	11 f0       	breq	.+4      	; 0xe4 <lcd_read+0x8>
  e0:	5c 9a       	sbi	0x0b, 4	; 11
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_read+0xa>
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	5d 9a       	sbi	0x0b, 5	; 11
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_read+0x16>
  f2:	29 b1       	in	r18, 0x09	; 9
  f4:	5e 98       	cbi	0x0b, 6	; 11
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x1c>
  f8:	5e 9a       	sbi	0x0b, 6	; 11
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_read+0x20>
  fc:	99 b1       	in	r25, 0x09	; 9
  fe:	22 95       	swap	r18
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	89 2f       	mov	r24, r25
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	5e 98       	cbi	0x0b, 6	; 11
 108:	82 2b       	or	r24, r18
 10a:	08 95       	ret

0000010c <lcd_waitbusy>:
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 112:	88 23       	and	r24, r24
 114:	dc f3       	brlt	.-10     	; 0x10c <lcd_waitbusy>
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_waitbusy+0xe>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 124:	08 95       	ret

00000126 <lcd_command>:
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_waitbusy>
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_gotoxy>:
 13a:	61 11       	cpse	r22, r1
 13c:	04 c0       	rjmp	.+8      	; 0x146 <lcd_gotoxy+0xc>
 13e:	80 58       	subi	r24, 0x80	; 128
 140:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
 144:	08 95       	ret
 146:	80 54       	subi	r24, 0x40	; 64
 148:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
 14c:	08 95       	ret

0000014e <lcd_clrscr>:
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
 154:	08 95       	ret

00000156 <lcd_home>:
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
 15c:	08 95       	ret

0000015e <lcd_putc>:
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_waitbusy>
 166:	ca 30       	cpi	r28, 0x0A	; 10
 168:	49 f4       	brne	.+18     	; 0x17c <lcd_putc+0x1e>
 16a:	80 34       	cpi	r24, 0x40	; 64
 16c:	10 f0       	brcs	.+4      	; 0x172 <lcd_putc+0x14>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_putc+0x16>
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
 17a:	04 c0       	rjmp	.+8      	; 0x184 <lcd_putc+0x26>
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_puts>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	29 f0       	breq	.+10     	; 0x1a2 <lcd_puts+0x1a>
 198:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <lcd_puts+0x10>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b0:	9a b1       	in	r25, 0x0a	; 10
 1b2:	9f 67       	ori	r25, 0x7F	; 127
 1b4:	9a b9       	out	0x0a, r25	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	fa ef       	ldi	r31, 0xFA	; 250
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1be:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c0:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 1c2:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	e0 e0       	ldi	r30, 0x00	; 0
 1c8:	fe e4       	ldi	r31, 0x4E	; 78
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ce:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d1 e0       	ldi	r29, 0x01	; 1
 1d6:	fe 01       	movw	r30, r28
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1dc:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e0:	fe 01       	movw	r30, r28
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1e6:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 1e8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ec:	21 97       	sbiw	r28, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1fc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 206:	81 2f       	mov	r24, r17
 208:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

}/* lcd_init */
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <InitADC>:
#include <avr/io.h>
#include "lcd.h"        //include LCD Library
#include <util/delay.h>
void InitADC(void)
{
	ADMUX|=(1<<REFS0);
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
 21e:	ea e7       	ldi	r30, 0x7A	; 122
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	87 68       	ori	r24, 0x87	; 135
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <readadc>:
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 22a:	ec e7       	ldi	r30, 0x7C	; 124
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
	ADMUX|=(1<<REFS0);
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
 230:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 232:	98 7f       	andi	r25, 0xF8	; 248
 234:	89 2b       	or	r24, r25
 236:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
 238:	ea e7       	ldi	r30, 0x7A	; 122
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
 242:	80 81       	ld	r24, Z
 244:	86 fd       	sbrc	r24, 6
 246:	fd cf       	rjmp	.-6      	; 0x242 <readadc+0x18>
	return(ADC);        //RETURN ADC VALUE
 248:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 24c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 250:	08 95       	ret

00000252 <main>:
int main(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	a8 97       	sbiw	r28, 0x28	; 40
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
	char a[20], b[20]; //, c[20];
	uint16_t x,y;//,z;
	InitADC();         //INITIALIZE ADC
 266:	0e 94 0a 01 	call	0x214	; 0x214 <InitADC>
	lcd_init(LCD_DISP_ON);  //INITIALIZE LCD
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_init>
	lcd_clrscr();
 270:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_clrscr>
	while(1)
	{
		lcd_home();
 274:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_home>
		x=readadc(0);      //READ ADC VALUE FROM PA.0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 15 01 	call	0x22a	; 0x22a <readadc>
 27e:	7c 01       	movw	r14, r24
		y=readadc(1);      //READ ADC VALUE FROM PA.1
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 15 01 	call	0x22a	; 0x22a <readadc>
 286:	8c 01       	movw	r16, r24
		x=x-512;
		y=y-512;
		itoa(x,a,10);
 288:	4a e0       	ldi	r20, 0x0A	; 10
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	be 01       	movw	r22, r28
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	c7 01       	movw	r24, r14
 294:	92 50       	subi	r25, 0x02	; 2
 296:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
		itoa(y,b,10);
 29a:	4a e0       	ldi	r20, 0x0A	; 10
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	be 01       	movw	r22, r28
 2a0:	6b 5e       	subi	r22, 0xEB	; 235
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	c8 01       	movw	r24, r16
 2a6:	92 50       	subi	r25, 0x02	; 2
 2a8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
		lcd_puts("x=");     //DISPLAY THE RESULTS ON LCD
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
		lcd_gotoxy(2,0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
		lcd_puts(a);
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
		lcd_gotoxy(7,0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
		lcd_puts("y=");
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
		lcd_gotoxy(9,0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
		lcd_puts(b);
 2dc:	ce 01       	movw	r24, r28
 2de:	45 96       	adiw	r24, 0x15	; 21
 2e0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	}
 2e4:	c7 cf       	rjmp	.-114    	; 0x274 <main+0x22>

000002e6 <itoa>:
 2e6:	45 32       	cpi	r20, 0x25	; 37
 2e8:	51 05       	cpc	r21, r1
 2ea:	20 f4       	brcc	.+8      	; 0x2f4 <itoa+0xe>
 2ec:	42 30       	cpi	r20, 0x02	; 2
 2ee:	10 f0       	brcs	.+4      	; 0x2f4 <itoa+0xe>
 2f0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__itoa_ncheck>
 2f4:	fb 01       	movw	r30, r22
 2f6:	10 82       	st	Z, r1
 2f8:	cb 01       	movw	r24, r22
 2fa:	08 95       	ret

000002fc <__itoa_ncheck>:
 2fc:	bb 27       	eor	r27, r27
 2fe:	4a 30       	cpi	r20, 0x0A	; 10
 300:	31 f4       	brne	.+12     	; 0x30e <__itoa_ncheck+0x12>
 302:	99 23       	and	r25, r25
 304:	22 f4       	brpl	.+8      	; 0x30e <__itoa_ncheck+0x12>
 306:	bd e2       	ldi	r27, 0x2D	; 45
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	0c 94 8a 01 	jmp	0x314	; 0x314 <__utoa_common>

00000312 <__utoa_ncheck>:
 312:	bb 27       	eor	r27, r27

00000314 <__utoa_common>:
 314:	fb 01       	movw	r30, r22
 316:	55 27       	eor	r21, r21
 318:	aa 27       	eor	r26, r26
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	a4 17       	cp	r26, r20
 322:	10 f0       	brcs	.+4      	; 0x328 <__utoa_common+0x14>
 324:	a4 1b       	sub	r26, r20
 326:	83 95       	inc	r24
 328:	50 51       	subi	r21, 0x10	; 16
 32a:	b9 f7       	brne	.-18     	; 0x31a <__utoa_common+0x6>
 32c:	a0 5d       	subi	r26, 0xD0	; 208
 32e:	aa 33       	cpi	r26, 0x3A	; 58
 330:	08 f0       	brcs	.+2      	; 0x334 <__utoa_common+0x20>
 332:	a9 5d       	subi	r26, 0xD9	; 217
 334:	a1 93       	st	Z+, r26
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	79 f7       	brne	.-34     	; 0x318 <__utoa_common+0x4>
 33a:	b1 11       	cpse	r27, r1
 33c:	b1 93       	st	Z+, r27
 33e:	11 92       	st	Z+, r1
 340:	cb 01       	movw	r24, r22
 342:	0c 94 a3 01 	jmp	0x346	; 0x346 <strrev>

00000346 <strrev>:
 346:	dc 01       	movw	r26, r24
 348:	fc 01       	movw	r30, r24
 34a:	67 2f       	mov	r22, r23
 34c:	71 91       	ld	r23, Z+
 34e:	77 23       	and	r23, r23
 350:	e1 f7       	brne	.-8      	; 0x34a <strrev+0x4>
 352:	32 97       	sbiw	r30, 0x02	; 2
 354:	04 c0       	rjmp	.+8      	; 0x35e <strrev+0x18>
 356:	7c 91       	ld	r23, X
 358:	6d 93       	st	X+, r22
 35a:	70 83       	st	Z, r23
 35c:	62 91       	ld	r22, -Z
 35e:	ae 17       	cp	r26, r30
 360:	bf 07       	cpc	r27, r31
 362:	c8 f3       	brcs	.-14     	; 0x356 <strrev+0x10>
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
